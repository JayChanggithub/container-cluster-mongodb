variables:
  sut_ip: "10.99.104.214"
  reference: "test.msg"
  db_work: "/srv/deploy"
  exe_path: "/srv/deploy/$CI_PROJECT_NAME"
  script_cmd: "'bash mongo_backup.sh -V'"
  deployment_dir: "deployments/;crond/"

.normal: &normal
  before_script:
    - chmod a+x *.sh *.py || true
    - export VERSION=$(egrep -o 'Rev\:\ ([0-9].){2}[0-9]+' README.md | awk '{print $NF}')
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
  after_script:
    - docker logout
  tags:
    - IPT-K8S-NODE2

.tool: &tool
  before_script:
    - apk add --update curl git && rm -rf /var/cache/apk/*
    - git clone $TOOLS_PROJECT
  tags:
    - IPT-K8S-NODE2

stages:
  - lintcheck
  - build1
  - pushImage1
  - build2
  - pushImage2
  - production
  - deployment
  - cleanup

codeReview:Shell:
  <<: *normal
  stage: lintcheck
  image: registry.ipt-gitlab:8081/sit-develop-tool/shellcheck:$SHCHECK_VER
  before_script:
    - echo "Starting Shell coding style verification."
  script:
    - find . -iname "*.sh" | xargs shellcheck -s bash --color=always || true
  after_script:
    - echo "Finish coding style verification."
  tags:
    - IPT-K8S-NODE2
  only:
    - master
    - pushes
  except:
    - schedules

prepareImageMongoDeploy:
  <<: *normal
  stage: build1
  script:
    - docker build --no-cache -t $CI_REGISTRY_IMAGE:$VERSION .
  tags:
    - IPT-K8S-NODE2
  only:
    - master
    - pushes
  except:
    - schedules

imagePushMongoDeploy:
  <<: *normal
  stage: pushImage1
  script:
   - docker push $CI_REGISTRY_IMAGE:$VERSION
  tags:
   - IPT-K8S-NODE2
  only:
    - master
    - pushes
  except:
    - schedules

prepareImageMongoBackup:
  <<: *normal
  stage: build2
  script:
    - docker build --no-cache -t ${CI_REGISTRY_IMAGE}/mongo-backup-client:$VERSION ./crond
  tags:
    - IPT-K8S-NODE2
  only:
    - master
    - pushes
  except:
    - schedules

imagePushMongoBackup:
  <<: *normal
  stage: pushImage2
  script:
   - docker push ${CI_REGISTRY_IMAGE}/mongo-backup-client:$VERSION
  tags:
   - IPT-K8S-NODE2
  only:
    - master
    - pushes
  except:
    - schedules

k8sdeploy:
  <<: *normal
  stage: production
  image: registry.ipt-gitlab:8081/sit-develop-tool/tool-kubectl-deployment:$KUBE_VER
  script:
    - |
        sed -i "s,__VERSION__,${VERSION},g" deployments/mongo-cluster.yaml
        sed -i "s,__VERSION__,${VERSION},g" crond/cronjobs.yaml

        for f in `echo "$deployment_dir" | sed -E s',;, ,'g`
        do
            if [ `cat ${f}*.yaml | grep -c $VERSION` -eq 1 ]; then
                kubectl apply -f $f --record
            fi
        done

        sleep 5

        kubectl get po -o wide -A | grep mongo
        kubectl get cronjob -o wide -A | grep mongo
  tags:
    - IPT-K8S-NODE2
  only:
    - master
    - pushes
  except:
    - schedules

DBaction:
  <<: *normal
  stage: deployment
  image: registry.ipt-gitlab:8081/sit-develop-tool/tool-ansible:$ANSIBLE_VER
  before_script:
    - |
        export VERSION=$(egrep -o 'Rev\:\ ([0-9].){2}[0-9]+' README.md | awk '{print $NF}')
        # print variables
        more << EOF
        Show Group variables:
        ===========================================================================
        EXE_PATH: $exe_path
        WORK_PATH: $db_work
        SUT_IP: $sut_ip
        VERSION: $VERSION
        ===========================================================================
        EOF

        # configure hosts (replace ";" to "\n")
        sed -i "s,<SRV_USER>,${SRV_USER},g" $PWD/hosts
        sed -i "s,<SRV_PASS>,${SRV_PASS},g" $PWD/hosts
        sed -i "s,<SRV_IP>,${sut_ip},g" $PWD/hosts
        sed -i -E "s,\;,\n,g" $PWD/hosts

        # configure docker-compose.yaml, shell
        sed -i "s,CI_IMAGE:__VERSION__,$CI_REGISTRY_IMAGE:$VERSION,g" $PWD/docker-compose.yaml
        sed -i "s,CI_IMAGE:__VERSION__,$CI_REGISTRY_IMAGE:$VERSION,g" $PWD/mongo-setup.sh

        # configure mongo_backup.sh password
        sed -i "s,BACKPW,$BAK_PASS,g" $PWD/mongo_backup.sh

        # deploy tools
        ansible "*" -i $PWD/hosts -m shell -a "echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin" -b
        ansible "*" -i $PWD/hosts -m shell -a "mkdir -p $db_work" -b
        ansible "*" -i $PWD/hosts -m copy  -a "src=$PWD dest=$db_work owner=$SRV_USER group=$SRV_USER" -b
        ansible "*" -i $PWD/hosts -m shell -a "cd $exe_path && chmod +x *.sh" || true
        echo "Configure server done."
  script:
    - |
        # command information
        more << EOF
        ===========================================================================
        Starting run test script on each SUT...
          - Run time: $(date '+[%F %T]')
          - Run command as below:
            - ${script_cmd}
        ===========================================================================
        EOF
        bash start.sh
  after_script:
    - |
        if [ -f ${PWD}/hosts ]; then
            export host_conf=hosts
        else
            export host_conf=inventory
        fi
        # generate artifacts in each host
        for e in $(grep -E '^([0-9]{1,3}\.){3}[0-9]{1,3}$' $host_conf)
        do
            ansible "*" -i ${PWD}/$host_conf -m shell -a "cd $exe_path && tar zcvf reports.tar.gz reports/" \
                        -b
            ansible "*" -i ${PWD}/$host_conf -m fetch -a "dest=$PWD src=${exe_path}/reports.tar.gz" \
                        -b
            mv ${e}/${exe_path}/reports.tar.gz . \
                && tar zxvf reports.tar.gz \
                && rm -f reports.tar.gz
            if [ -d $e ]; then
                rm -rf $e
            fi
            mkdir ${e}-Report && mv reports ${e}-Report/test-logs
        done

        # clear environ
        ansible "*" -i ${PWD}/$host_conf -m shell -a "rm -rf $exe_path" -b

        # save console output to log in each host
        for e in $(grep -E '^([0-9]{1,3}\.){3}[0-9]{1,3}$' $host_conf)
        do
            curl -s --location ${CI_JOB_URL}/raw > ${e}-Report/console.log
            sed -i -r 's/'$(echo -e "\033")'\[[0-9]{1,2}(;([0-9]{1,2})?)?[mK]|\r//g' ${e}-Report/console.log
        done
  tags:
    - IPT-K8S-NODE2
  artifacts:
    name: ${CI_PROJECT_NAME}-Reports
    expire_in: 30d
    when: on_failure
    paths:
      - ${PWD}/*.*.*.*-Report
  when: always
  only:
    - schedules
  except:
    - pushes
  allow_failure: true

cleanEnv:
  <<: *tool
  stage: cleanup
  script:
    - sh tool-gitlab-deployment/pipeline_clean.sh
  tags:
    - IPT-K8S-NODE2
  when: always
